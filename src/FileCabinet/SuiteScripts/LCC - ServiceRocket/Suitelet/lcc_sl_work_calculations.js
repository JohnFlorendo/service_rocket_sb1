/**
 * @NApiVersion 2.x
 * @NScriptType Suitelet
 * @NModuleScope SameAccount
 */
define(['N/record', 'N/render','N/file','N/search','N/ui/serverWidget', '../Library/lcc_lib_payroll', 'N/task', 'N/runtime', 'N/http','N/format'],
    function(record, render,file,search,serverWidget, libHelper, task, runtime,http, format) {
        var userObj = runtime.getCurrentUser();

        function onRequest(context) {
            if(context.request.method === 'GET') {
                switch(context.request.parameters.custpage_action) {
                    case "updatebonus":
                        record.submitFields({
                            type: "bonus",
                            id: context.request.parameters.custpage_bonus_id,
                            values: { bonusstatus: context.request.parameters.custpage_status }
                        });

                        context.response.sendRedirect({
                            type: http.RedirectType.RECORD,
                            identifier: "customrecord_sr_pay_cycle",
                            id: context.request.parameters.custpage_paycyle_id
                        });

                        break;
                    case "generatecsv":
                        generateCSV(context);
                        break;
                    default:
                        var form = serverWidget.createForm('Generate Employee Payroll');
                        var fldGroup = form.addFieldGroup({
                            id : 'custpage_group',
                            label : 'Filter'
                        });
                        form.addField({
                            id : 'custpage_startdate',
                            type : serverWidget.FieldType.DATE,
                            label : 'Start Date',
                            container : 'custpage_group'
                        });

                        form.addField({
                            id : 'custpage_enddate',
                            type : serverWidget.FieldType.DATE,
                            label : 'End Date',
                            container : 'custpage_group'
                        });

                        form.addField({
                            id : 'custpage_payrollprovider',
                            type : serverWidget.FieldType.SELECT,
                            source : 'customrecord_payroll_provider',
                            label : 'Payroll Provider',
                            container : 'custpage_group'
                        });

                        // var objPayCycleStatus = form.addField({
                        //     id : 'custpage_paycyclestatus',
                        //     type : serverWidget.FieldType.SELECT,
                        //     source : 'customlist_sr_pc_pay_cycle_status',
                        //     label : 'Pay Cycle Status',
                        //     container : 'custpage_group'
                        // });
                        // objPayCycleStatus.defaultValue = 1;

                        // form.addField({
                        //     id : 'custpage_forcastedpayrollvalue',
                        //     type : serverWidget.FieldType.CURRENCY,
                        //     label : 'Forcasted Payroll Value',
                        //     container : 'custpage_group'
                        // });

                        // form.addField({
                        //     id : 'custpage_forcastedpaymentdate',
                        //     type : serverWidget.FieldType.DATE,
                        //     label : 'Forcasted Payment Date',
                        //     container : 'custpage_group'
                        // });

                        form.addField({
                            id : 'custpage_memo',
                            type : serverWidget.FieldType.TEXTAREA,
                            label : 'Memo',
                            container : 'custpage_group'
                        });

                        form.addField({
                            id : 'custpage_generatedby',
                            type : serverWidget.FieldType.SELECT,
                            label : 'Generated By',
                            source: 'employee',
                            container : 'custpage_group'
                        }).updateDisplayType({ displayType : serverWidget.FieldDisplayType.DISABLED }).defaultValue = userObj.id;

                        fldGroup.isSingleColumn = true;
                        form.addSubmitButton('Submit');
                        form.clientScriptModulePath = '../Client/lcc_cs_validation_work_calculations.js';
                        context.response.writePage(form);
                        break;
                }

            } else {
                /** POST **/
                if(context.request.parameters.custpage_form == 'download'){
                    downloadPage (context)
                }else{
                    buildSubList(context);
                }
            }
        }

        function  buildPostPage(context) {
            var startdate = context.request.parameters.custpage_startdate;
            var enddate = context.request.parameters.custpage_enddate;
            var employee = context.request.parameters.custpage_employee;
            var objEmployee = libHelper.getEmployeeWorkCalendar(employee);
            var objNonWorkingHolidays = libHelper.getNonWorkingHolidays(objEmployee.intWorkCalender);
            var objWorkCalendar = libHelper.getWorkCalendar(objEmployee.intWorkCalender);
            var dtStartDate = libHelper.getFormattedDate(startdate);
            var dtEndDate = libHelper.getFormattedDate(enddate);

            var intNumberOfWorkingDays = 0;
            var intNumberOfNonWorkingDays = 0;
            for(var dt = dtStartDate; dt<=dtEndDate; dt.setDate(dt.getDate()+1)) {

                if(objWorkCalendar[dt.getDay()]) { intNumberOfWorkingDays += 1; }

                if(objNonWorkingHolidays[dt] != null) { intNumberOfNonWorkingDays += 1; }
            }

            var totalWorkingHours = parseFloat(objWorkCalendar.workhoursperday) * intNumberOfWorkingDays;
            var totalNonWorkingHours = parseFloat(objWorkCalendar.workhoursperday) * intNumberOfNonWorkingDays;
            var intAverageWH = totalWorkingHours - totalNonWorkingHours;
            var averageWorkingHours = intAverageWH.toFixed(2);

            var form = serverWidget.createForm(' ');

            form.addField({
                id : 'custpage_html',
                type : serverWidget.FieldType.INLINEHTML,
                label : "HTML"
            }).defaultValue  = "<a style='font-size:14px; padding: 6px 12px; color: #fff; background-color:#337ab7; border-color:#2e6da4; text-decoration: none;' href='https://3688201-sb1.app.netsuite.com/app/site/hosting/scriptlet.nl?script=736&deploy=1'>Back</a> <br/><br/><br/><br/> <span style='font-size: 20px;'>The total number of hours rendered by Employee "+objEmployee.name+" is "+averageWorkingHours+" hours.</span>"
            context.response.writePage(form);
        }

        function  buildSubList(context) {
            var startdate = libHelper.getFormattedDate(context.request.parameters.custpage_startdate);
            var enddate = libHelper.getFormattedDate(context.request.parameters.custpage_enddate);
            // var stPayCycleStatus = context.request.parameters.custpage_paycyclestatus;
            var payrollprovider = context.request.parameters.custpage_payrollprovider;
            var memo = context.request.parameters.custpage_memo;
            var form = serverWidget.createForm('Generate Employee Cycle');
            var objEmployeePayroll = libHelper.getAllEmployeesPayroll(context.request.parameters.custpage_startdate,context.request.parameters.custpage_enddate, payrollprovider);

            var fldState = form.addField({
                id : 'custpage_form',
                type : serverWidget.FieldType.TEXT,
                label : 'Form'
            });
            fldState.updateDisplayType({
                displayType : serverWidget.FieldDisplayType.HIDDEN
            });
            fldState.defaultValue = 'download';

            // form.addField({
            //     id : 'custpage_paycyclestatus',
            //     type : serverWidget.FieldType.TEXT,
            //     label : 'Pay Cycle Status',
            // }).updateDisplayType({
            //     displayType : serverWidget.FieldDisplayType.HIDDEN
            // }).defaultValue = stPayCycleStatus;

            // if(stPayCycleStatus == '5' || stPayCycleStatus == 5) {
            //     var objForcastedData = {
            //         forcasted_payroll_value: context.request.parameters.custpage_forcastedpayrollvalue,
            //         forcasted_payment_date: context.request.parameters.custpage_forcastedpaymentdate,
            //     };
            //
            //     form.addField({
            //         id : 'custpage_forcastedobj',
            //         type : serverWidget.FieldType.TEXTAREA,
            //         label : 'Forcasted Object',
            //     }).updateDisplayType({ displayType : serverWidget.FieldDisplayType.HIDDEN }).defaultValue = JSON.stringify(objForcastedData);
            // }

            form.addField({
                id : 'custpage_payrollprovider',
                type : serverWidget.FieldType.TEXT,
                label : 'Payroll Provider ID',
            }).updateDisplayType({
                displayType : serverWidget.FieldDisplayType.HIDDEN
            }).defaultValue = payrollprovider;

            form.addField({
                id : 'custpage_memo',
                type : serverWidget.FieldType.TEXTAREA,
                label : 'Memo',
            }).updateDisplayType({
                displayType : serverWidget.FieldDisplayType.HIDDEN
            }).defaultValue = memo;

            form.addField({
                id : 'custpage_startdate',
                type : serverWidget.FieldType.TEXT,
                label : 'Start Date',
                container : 'custpage_group'
            }).updateDisplayType({
                displayType : serverWidget.FieldDisplayType.HIDDEN
            }).defaultValue = context.request.parameters.custpage_startdate;

            form.addField({
                id : 'custpage_enddate',
                type : serverWidget.FieldType.TEXT,
                label : 'End Date',
                container : 'custpage_group'
            }).updateDisplayType({
                displayType : serverWidget.FieldDisplayType.HIDDEN
            }).defaultValue = context.request.parameters.custpage_enddate;

            var sublist = form.addSublist({
                id : 'custpage_sublist',
                type : serverWidget.SublistType.LIST,
                label : 'Employee Payroll List'
            });

            sublist.addField({
                id: 'custpage_sublist_employeeid',
                type : serverWidget.FieldType.TEXT,
                label : 'Employee Internalid'
            }).updateDisplayType({ displayType : serverWidget.FieldDisplayType.HIDDEN });

            sublist.addField({
                id: 'custpage_sublist_standardhour',
                type : serverWidget.FieldType.TEXT,
                label : 'Standard Hour'
            }).updateDisplayType({ displayType : serverWidget.FieldDisplayType.HIDDEN });

            sublist.addField({
                id: 'custpage_sublist_name',
                type : serverWidget.FieldType.TEXT,
                label : 'Name'
            });

            sublist.addField({
                id: 'custpage_sublist_empcode',
                type : serverWidget.FieldType.TEXT,
                label : 'Employee Number'
            });

            sublist.addField({
                id: 'custpage_sublist_costcenter',
                type : serverWidget.FieldType.TEXT,
                label : 'Cost Center'
            });

            sublist.addField({
                id: 'custpage_sublist_num_pays',
                type : serverWidget.FieldType.TEXT,
                label : 'Number of Pays'
            });

            sublist.addField({
                id: 'custpage_sublist_totalhours',
                type : serverWidget.FieldType.TEXT,
                label : 'Total Working Hours'
            });


            //LIST ALL EMPLOYEES
            var lineCount = 0;
            for(var objEmp in objEmployeePayroll){
                var stEmployeeCode = (objEmployeePayroll[objEmp].code == "") ? " " : objEmployeePayroll[objEmp].code;
                var stCostCenter = (objEmployeePayroll[objEmp].cost_center == "") ? " " : objEmployeePayroll[objEmp].cost_center;
                var stNumberPays = (objEmployeePayroll[objEmp].number_pays == "") ? " " : objEmployeePayroll[objEmp].number_pays;
                var stStandardHour = (objEmployeePayroll[objEmp].standard_hour == "") ? " " : objEmployeePayroll[objEmp].standard_hour;

                sublist.setSublistValue({
                    id : 'custpage_sublist_employeeid',
                    line : lineCount,
                    value : objEmployeePayroll[objEmp].id
                });

                sublist.setSublistValue({
                    id : 'custpage_sublist_standardhour',
                    line : lineCount,
                    value : stStandardHour
                });

                sublist.setSublistValue({
                    id : 'custpage_sublist_name',
                    line : lineCount,
                    value : objEmployeePayroll[objEmp].name
                });

                sublist.setSublistValue({
                    id : 'custpage_sublist_empcode',
                    line : lineCount,
                    value : stEmployeeCode
                });

                sublist.setSublistValue({
                    id : 'custpage_sublist_costcenter',
                    line : lineCount,
                    value : stCostCenter
                });

                sublist.setSublistValue({
                    id : 'custpage_sublist_num_pays',
                    line : lineCount,
                    value : stNumberPays
                });

                sublist.setSublistValue({
                    id : 'custpage_sublist_totalhours',
                    line : lineCount,
                    value : objEmployeePayroll[objEmp].total_working_hours
                });

                lineCount++;
            }

            form.addSubmitButton('Run');

            var stInline = '<script type="text/javascript">';
            stInline += "setTimeout(function(){ document.getElementById('custpage_sublistlnk').setAttribute('style','width:100%;');";
            stInline += "var div = document.createElement('div');";
            stInline += "div.setAttribute('style','display:inline; float:right; font-size:14px !important; font-weight:bold; color:#24385B !important;');";
            stInline += "div.innerHTML = 'Total No. of Employees: '+"+lineCount+";";
            stInline += "document.getElementById('custpage_sublistlnk').appendChild(div); }, 500);";
            stInline+='</script>';

            var fldInline = form.addField({
                id : 'custpage_inlinehtml',
                type : serverWidget.FieldType.INLINEHTML,
                label : 'INLINE HTML'
            });

            fldInline.defaultValue = stInline;

            context.response.writePage(form);
            //context.response.write(JSON.stringify(objEmployeePayroll));

        }

        function downloadPage (context) {
            var form = serverWidget.createForm(' ');
            var message = '';

            try {
                var startdate = format.parse({ value: context.request.parameters.custpage_startdate, type: format.Type.DATE });
                var enddate = format.parse({ value: context.request.parameters.custpage_enddate, type: format.Type.DATE });
                var payrollprovider = context.request.parameters.custpage_payrollprovider;
                var memo = context.request.parameters.custpage_memo;
                var arrEmployees = [];
                var objEmployeePayroll = {};

                for(var intIndex=0; intIndex<context.request.getLineCount('custpage_sublist'); intIndex++) {
                    var employeeId = context.request.getSublistValue({ group: 'custpage_sublist', name: 'custpage_sublist_employeeid', line: intIndex });
                    arrEmployees.push({
                        employeeid: employeeId,
                        costcenter: context.request.getSublistValue({ group: 'custpage_sublist', name: 'custpage_sublist_costcenter', line: intIndex })
                    });

                    if(objEmployeePayroll[employeeId] == null) { objEmployeePayroll[employeeId] = {}; }
                    objEmployeePayroll[employeeId] = {
                        id: employeeId,
                        cost_center: context.request.getSublistValue({ group: 'custpage_sublist', name: 'custpage_sublist_costcenter', line: intIndex }),
                        standard_hour: context.request.getSublistValue({ group: 'custpage_sublist', name: 'custpage_sublist_standardhour', line: intIndex }),
                        name: context.request.getSublistValue({ group: 'custpage_sublist', name: 'custpage_sublist_name', line: intIndex }),
                        code: context.request.getSublistValue({ group: 'custpage_sublist', name: 'custpage_sublist_empcode', line: intIndex }),
                        number_pays: context.request.getSublistValue({ group: 'custpage_sublist', name: 'custpage_sublist_num_pays', line: intIndex }),
                        total_working_hours: parseFloat(context.request.getSublistValue({ group: 'custpage_sublist', name: 'custpage_sublist_totalhours', line: intIndex })).toFixed(2),
                    };
                }

                var fileId = libHelper.generateCSV(objEmployeePayroll, payrollprovider, startdate,enddate);
                // var stPayCycleStatus = context.request.parameters.custpage_paycyclestatus;
                // var stForcastedData = "";
                // if(stPayCycleStatus == '5' || stPayCycleStatus == 5) { stForcastedData = context.request.parameters.custpage_forcastedobj; }

                var objData = {
                    startdate: context.request.parameters.custpage_startdate,
                    enddate: context.request.parameters.custpage_enddate,
                    payrollprovider: payrollprovider,
                    memo: memo,
                    fileid: fileId,
                    generatedby: userObj.id,
                    // stPayCycleStatus: stPayCycleStatus,
                    // stForcastedData: stForcastedData
                };

                var intPayCycle = libHelper.createPayCycle(objData);

                log.debug('objData', objData);

                if(runtime.envType == 'SANDBOX') {
                    var stPayCycleLink = '/app/common/custom/custrecordentry.nl?rectype=391&id='+intPayCycle; // SANDBOX
                } else {
                    var stPayCycleLink = '/app/common/custom/custrecordentry.nl?rectype=701&id='+intPayCycle; // PRODUCTION
                }

                // var stTaskId = task.create({
                //     taskType: task.TaskType.SCHEDULED_SCRIPT,
                //     scriptId: "customscript_lcc_ss_process_paycycle",
                //     deploymentId: "customdeploy_lcc_ss_process_paycycle",
                //     params: {
                //         custscript_data: JSON.stringify({
                //             startdate: context.request.parameters.custpage_startdate,
                //             enddate: context.request.parameters.custpage_enddate,
                //             arrEmployees: JSON.stringify(arrEmployees),
                //             intPayCycle: intPayCycle
                //         })
                //     }
                // }).submit();

                /** UPDATED **/
                // var stTaskId = task.create({
                //     taskType: task.TaskType.MAP_REDUCE,
                //     scriptId: "customscript_lcc_mr_process_paycycle",
                //     deploymentId: "customdeploy_lcc_mr_process_paycycle",
                //     params: {
                //         custscript_param_data: JSON.stringify({
                //             startdate: context.request.parameters.custpage_startdate,
                //             enddate: context.request.parameters.custpage_enddate,
                //             arrEmployees: JSON.stringify(arrEmployees),
                //             intPayCycle: intPayCycle,
                //             recordtype: "paycycle"
                //         })
                //     }
                // }).submit();
                //
                // var stTaskId = task.create({
                //     taskType: task.TaskType.MAP_REDUCE,
                //     scriptId: "customscript_lcc_mr_process_paycycle",
                //     deploymentId: "customdeploy_lcc_mr_process_pc_timeoff",
                //     params: {
                //         custscript_param_data: JSON.stringify({
                //             startdate: context.request.parameters.custpage_startdate,
                //             enddate: context.request.parameters.custpage_enddate,
                //             arrEmployees: JSON.stringify(arrEmployees),
                //             intPayCycle: intPayCycle,
                //             recordtype: "allowance"
                //         })
                //     }
                // }).submit();

                var objTasks = {};
                objTasks.paycycle = task.create({
                    taskType: task.TaskType.MAP_REDUCE,
                    scriptId: "customscript_lcc_mr_process_paycycle_v2",
                    deploymentId: "customdeploy_lcc_mr_process_paycycle_v2",
                    params: {
                        custscript_param_data_v2: JSON.stringify({
                            startdate: context.request.parameters.custpage_startdate,
                            enddate: context.request.parameters.custpage_enddate,
                            arrEmployees: JSON.stringify(arrEmployees),
                            intPayCycle: intPayCycle,
                            recordtype: "paycycle"
                        })
                    }
                }).submit();

                objTasks.bonus = task.create({
                    taskType: task.TaskType.MAP_REDUCE,
                    scriptId: "customscript_lcc_mr_process_paycycle_v2",
                    deploymentId: "customdeploy_lcc_mr_process_pc_bonus_v2",
                    params: {
                        custscript_param_data_v2: JSON.stringify({
                            startdate: context.request.parameters.custpage_startdate,
                            enddate: context.request.parameters.custpage_enddate,
                            arrEmployees: JSON.stringify(arrEmployees),
                            intPayCycle: intPayCycle,
                            recordtype: "bonus"
                        })
                    }
                }).submit();

                objTasks.allowance = task.create({
                    taskType: task.TaskType.MAP_REDUCE,
                    scriptId: "customscript_lcc_mr_process_paycycle_v2",
                    deploymentId: "customdeploy_lcc_mr_process_pc_allowa_v2",
                    params: {
                        custscript_param_data_v2: JSON.stringify({
                            startdate: context.request.parameters.custpage_startdate,
                            enddate: context.request.parameters.custpage_enddate,
                            arrEmployees: JSON.stringify(arrEmployees),
                            intPayCycle: intPayCycle,
                            recordtype: "allowance"
                        })
                    }
                }).submit();

                objTasks.expensereport = task.create({
                    taskType: task.TaskType.MAP_REDUCE,
                    scriptId: "customscript_lcc_mr_process_paycycle_v2",
                    deploymentId: "customdeploy_lcc_mr_process_pc_er_v2",
                    params: {
                        custscript_param_data_v2: JSON.stringify({
                            startdate: context.request.parameters.custpage_startdate,
                            enddate: context.request.parameters.custpage_enddate,
                            arrEmployees: JSON.stringify(arrEmployees),
                            intPayCycle: intPayCycle,
                            recordtype: "expensereport"
                        })
                    }
                }).submit();

                context.response.sendRedirect({
                    type: http.RedirectType.RECORD,
                    identifier: "customrecord_sr_pay_cycle",
                    parameters: {
                        id: intPayCycle,
                        custpage_action: "GENERATED_FROM_SUITELET",
                        custpage_objTasks: JSON.stringify(objTasks)
                    }
                });

            } catch (e) {
                message += '<div id="div__alert"><div class="uir-alert-box error session_error_alert" width="100%" role="status" style="">';
                message +=  '<div class="icon error"><img src="/images/icons/messagebox/icon_msgbox_error.png" alt=""></div>';
                message +=  '<div class="content"><div class="title">Error</div><div class="descr">'+ e +'</div></div></div></div>';

                form.addField({
                    id : 'custpage_html',
                    type : serverWidget.FieldType.INLINEHTML,
                    label : "HTML"
                }).defaultValue  = message;
                context.response.writePage(form);
            }
        }

        /** THIS FUNCTION IS USED TO GENERATE CSV FILE IN THE PAY CYCLE RECORD **/
        function generateCSV(context) {
            var Malaysia_Payroll_Provider = 5;
            var objCurrencies = libHelper.getCurrencies();
            var recPayCycle = record.load({type: "customrecord_sr_pay_cycle", id: context.request.parameters.custpage_paycyle_id, isDynamic: true });
            var recPayrollProvider = record.load({type: "customrecord_payroll_provider", id: recPayCycle.getValue('custrecord_payroll_provider'), isDynamic: true });
            var arrEmployees = [];
            var objEmployees = {};
            var objPayCodes = {};
            var objCostCenterOverride = {};
            var objAllowancesOverride = {};

            if(recPayrollProvider.getValue('custrecord_sr_cost_center_override') != '') { objCostCenterOverride = JSON.parse(recPayrollProvider.getValue('custrecord_sr_cost_center_override')); }
            if(recPayrollProvider.getValue('custrecord_sr_pp_paycode_id') != '') { objPayCodes = JSON.parse(recPayrollProvider.getValue('custrecord_sr_pp_paycode_id')); }
            if(recPayrollProvider.getValue('custrecord_sr_allowance_override') != '') { objAllowancesOverride = JSON.parse(recPayrollProvider.getValue('custrecord_sr_allowance_override')); }

            for(var intIndex=0; intIndex<recPayCycle.getLineCount('recmachcustrecord_sr_pc_pay_cycle_header'); intIndex++) {
                arrEmployees.push(recPayCycle.getSublistValue({ sublistId: 'recmachcustrecord_sr_pc_pay_cycle_header', fieldId: 'custrecord_sr_pc_emp_employee', line: intIndex }));
            }

            for(intIndex=0; intIndex<recPayCycle.getLineCount('recmachcustrecord_sr_pcl_paycycleheader'); intIndex++) {
                var objTemp = {};
                var intEmpId = recPayCycle.getSublistValue('recmachcustrecord_sr_pcl_paycycleheader','custrecord_sr_pcl_employee_id', intIndex);
                if(objEmployees[intEmpId] == null) { objEmployees[intEmpId] = { data:[] }; }

                objTemp = {
                    code: recPayCycle.getSublistValue('recmachcustrecord_sr_pcl_paycycleheader','custrecord_sr_pcl_employee_code', intIndex),
                    cost_center: recPayCycle.getSublistValue('recmachcustrecord_sr_pcl_paycycleheader','custrecord_sr_pcl_cost_center_code', intIndex),
                    paycode_id: recPayCycle.getSublistValue('recmachcustrecord_sr_pcl_paycycleheader','custrecord_sr_pcl_paycode_id', intIndex),
                    total_working_hours: recPayCycle.getSublistValue('recmachcustrecord_sr_pcl_paycycleheader','custrecord_sr_pcl_quantity', intIndex),
                    payroll_start: recPayCycle.getSublistValue('recmachcustrecord_sr_pcl_paycycleheader','custrecord_sr_pcl_payroll_start', intIndex),
                    payroll_end: recPayCycle.getSublistValue('recmachcustrecord_sr_pcl_paycycleheader','custrecord_sr_pcl_end', intIndex),
                    leave_start: recPayCycle.getSublistValue('recmachcustrecord_sr_pcl_paycycleheader','custrecord_leave_start', intIndex),
                    leave_end: recPayCycle.getSublistValue('recmachcustrecord_sr_pcl_paycycleheader','custrecord_leave_end', intIndex),
                    number_pays: recPayCycle.getSublistValue('recmachcustrecord_sr_pcl_paycycleheader','custrecord_number_pays', intIndex),
                    alter_rate: recPayCycle.getSublistValue('recmachcustrecord_sr_pcl_paycycleheader','custrecord_alternative_rate', intIndex)
                };

                if(!recPayrollProvider.getValue('custrecord_sr_is_excluded_er_download')) {
                    objTemp['expense_report'] = recPayCycle.getSublistText('recmachcustrecord_sr_pcl_paycycleheader','custrecord_sr_pcl_expense_report', intIndex)
                }

                if(recPayCycle.getValue('custrecord_payroll_provider') == Malaysia_Payroll_Provider) {
                    objTemp['category'] = recPayCycle.getSublistText('recmachcustrecord_sr_pcl_paycycleheader','custrecord_sr_pcl_expense_category', intIndex);
                }

                if(!recPayrollProvider.getValue('custrecord_sr_is_excluded_commission_dl')) {
                    objTemp['commission'] = recPayCycle.getSublistText('recmachcustrecord_sr_pcl_paycycleheader','custrecord_sr_pcl_commission', intIndex);
                }

                objEmployees[intEmpId].data.push(objTemp);

            }

            var arrBonuses = libHelper.getEmployeeBonuses(arrEmployees, recPayCycle.getText('custrecord_sr_pc_start_date'), recPayCycle.getText('custrecord_sr_pc_end_date'));

            /** ADD ALLOWANCES IN THE OBJECT FOR CSV GENERATION **/
            if(arrBonuses.length != 0) {
                var intBonusPaycodeId = 10524;

                for(var intIndex in arrBonuses) {
                    var lineNumber = recPayCycle.findSublistLineWithValue({ sublistId: 'recmachcustrecord_sr_pcl_paycycleheader', fieldId: 'custrecord_sr_pcl_bonus', value: arrBonuses[intIndex].bonusid });
                    if(lineNumber == -1) {

                        /** ADD THE BONUS IN THE OBJECT IF BONUS STATUS IS READY TO PAY **/
                        if(arrBonuses[intIndex].bonusstatus == 'ready_to_pay') {
                            var flUSDRate = libHelper.getUSDCurrencyRate('bonus',arrBonuses[intIndex].bonuscurrency, objCurrencies, recPayCycle.getText('custrecord_sr_pc_start_date'), recPayCycle.getText('custrecord_sr_pc_end_date'));
                            if(recPayCycle.getValue('custrecord_payroll_provider') != 1) { intBonusPaycodeId = arrBonuses[intIndex].bonustype; }
                            var intEmpId = arrBonuses[intIndex].bonusemployee;
                            if(objEmployees[intEmpId] == null) { objEmployees[intEmpId] = { data:[] }; }
                            var stCode = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].code;
                            var stCostCenter = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].cost_center;
                            var dtStartDate = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].payroll_start;
                            var dtEndDate = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].payroll_end;

                            objEmployees[intEmpId].data.push({
                                code: stCode,
                                cost_center: stCostCenter,
                                paycode_id: intBonusPaycodeId,
                                total_working_hours: arrBonuses[intIndex].bonusamountabsolute,
                                payroll_start: dtStartDate,
                                payroll_end: dtEndDate,
                                leave_start: "",
                                leave_end: "",
                                number_pays: '1.00',
                                alter_rate: 0
                            });

                            /** CREATE PAY CYCLE LINE RECORD **/
                            var recPayCycleLine = record.create({ type: "customrecord_sr_pay_cycle_lines", isDynamic: true });
                            recPayCycleLine.setValue('custrecord_sr_pcl_paycycleheader', recPayCycle.id);
                            recPayCycleLine.setValue('custrecord_sr_pcl_employee_id', intEmpId);
                            recPayCycleLine.setValue('custrecord_sr_pcl_employee_code', stCode);
                            recPayCycleLine.setValue('custrecord_sr_pcl_cost_center_code', stCostCenter);
                            recPayCycleLine.setValue('custrecord_sr_pcl_paycode_id', intBonusPaycodeId);
                            recPayCycleLine.setValue('custrecord_sr_pcl_quantity', arrBonuses[intIndex].bonusamountabsolute);
                            recPayCycleLine.setValue('custrecord_sr_pcl_payroll_start', dtStartDate);
                            recPayCycleLine.setValue('custrecord_sr_pcl_end', dtEndDate);
                            recPayCycleLine.setValue('custrecord_leave_start', '');
                            recPayCycleLine.setValue('custrecord_leave_end', '');
                            recPayCycleLine.setValue('custrecord_number_pays', '1.00');
                            recPayCycleLine.setValue('custrecord_alternative_rate', 0);
                            recPayCycleLine.setValue('custrecord_sr_pcl_bonus', arrBonuses[intIndex].bonusid);
                            recPayCycleLine.setValue('custrecord_sr_pcl_bonus_type', arrBonuses[intIndex].bonustypeid);
                            recPayCycleLine.setValue('custrecord_sr_pcl_usd_amount', parseFloat(flUSDRate * arrBonuses[intIndex].bonusamountabsolute));
                            recPayCycleLine.save();
                        }
                    }
                }
            }

            var arrAllowances = libHelper.getEmployeeAllowances(arrEmployees, recPayCycle.getText('custrecord_sr_pc_start_date'), recPayCycle.getText('custrecord_sr_pc_end_date'));

            /** ADD ALLOWANCES IN THE OBJECT FOR CSV GENERATION **/
            if(arrAllowances.length != 0) {
                for(var intIndex in arrAllowances) {
                    var lineNumber = recPayCycle.findSublistLineWithValue({ sublistId: 'recmachcustrecord_sr_pcl_paycycleheader', fieldId: 'custrecord_sr_pcl_allowance', value: arrAllowances[intIndex].allowanceid });
                    if(lineNumber == -1) {
                        var flUSDRate = libHelper.getUSDCurrencyRate('allowance',arrAllowances[intIndex].allowancecurrency, objCurrencies, recPayCycle.getText('custrecord_sr_pc_start_date'), recPayCycle.getText('custrecord_sr_pc_end_date'));
                        var intEmpId = arrAllowances[intIndex].allowanceemployee;
                        if(objEmployees[intEmpId] == null) { objEmployees[intEmpId] = { data:[] }; }
                        var now = new Date();
                        var stCode = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].code;
                        var stCostCenter = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].cost_center;
                        // var stPayCode = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].paycode_id;
                        var stPayCode = (objAllowancesOverride[arrAllowances[intIndex].allowancetypetext] == null) ? arrAllowances[intIndex].allowancetypetext : objAllowancesOverride[arrAllowances[intIndex].allowancetypetext];
                        var dtStartDate = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].payroll_start;
                        var dtEndDate = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].payroll_end;

                        objEmployees[intEmpId].data.push({
                            code: stCode,
                            cost_center: stCostCenter,
                            paycode_id: stPayCode,
                            total_working_hours: arrAllowances[intIndex].allowanceamount,
                            payroll_start: dtStartDate,
                            payroll_end: dtEndDate,
                            leave_start: "",
                            leave_end: "",
                            number_pays: '1.00',
                            alter_rate: 0,
                        });

                        var recPayCycleLine = record.create({ type: "customrecord_sr_pay_cycle_lines", isDynamic: true });
                        recPayCycleLine.setValue('custrecord_sr_pcl_paycycleheader', recPayCycle.id);
                        recPayCycleLine.setValue('custrecord_sr_pcl_employee_id', arrAllowances[intIndex].allowanceemployee);
                        recPayCycleLine.setValue('custrecord_sr_pcl_employee_code', stCode);
                        recPayCycleLine.setValue('custrecord_sr_pcl_cost_center_code', stCostCenter);
                        recPayCycleLine.setValue('custrecord_sr_pcl_paycode_id', stPayCode);
                        recPayCycleLine.setValue('custrecord_sr_pcl_quantity', arrAllowances[intIndex].allowanceamount);
                        recPayCycleLine.setValue('custrecord_sr_pcl_payroll_start', dtStartDate);
                        recPayCycleLine.setValue('custrecord_sr_pcl_end', dtEndDate);
                        recPayCycleLine.setValue('custrecord_leave_start', '');
                        recPayCycleLine.setValue('custrecord_leave_end', '');
                        recPayCycleLine.setValue('custrecord_number_pays', '1.00');
                        recPayCycleLine.setValue('custrecord_alternative_rate', 0);
                        recPayCycleLine.setValue('custrecord_sr_pcl_allowance', arrAllowances[intIndex].allowanceid);
                        recPayCycleLine.setValue('custrecord_sr_pcl_usd_amount', parseFloat(flUSDRate * arrAllowances[intIndex].allowanceamount));
                        var intPayCycleLineId = recPayCycleLine.save();

                        /** PAY CYCLE ALLOWANCE PAYMENT **/
                        var recPayCycleAllowancePayment = record.create({ type: "customrecord_sr_pc_allowance_payment", isDynamic: true });
                        recPayCycleAllowancePayment.setValue('custrecord_sr_pay_cycle_header', recPayCycle.id);
                        recPayCycleAllowancePayment.setValue('custrecord_sr_pay_cycle_line_header', intPayCycleLineId);
                        recPayCycleAllowancePayment.setValue('custrecord_sr_allowance_amount_paid', arrAllowances[intIndex].allowanceamount);
                        recPayCycleAllowancePayment.setValue('custrecord_sr_allowance_date_paid', now);
                        recPayCycleAllowancePayment.save();
                    }
                }
            }

            /** ADD THE EXPENSES REPORT IN THE OBJECT **/
            // if(!recPayrollProvider.getValue('custrecord_sr_is_excluded_er_download')) {
            if(recPayCycle.getValue('custrecord_payroll_provider') == Malaysia_Payroll_Provider) {
                var arrExpenseReports = libHelper.getEmployeeExpenseReportDetails(arrEmployees, recPayCycle.getText('custrecord_sr_pc_start_date'),recPayCycle.getText('custrecord_sr_pc_end_date'));
            } else {
                var arrExpenseReports = libHelper.getEmployeeExpenseReports(arrEmployees, recPayCycle.getText('custrecord_sr_pc_start_date'),recPayCycle.getText('custrecord_sr_pc_end_date'));
            }

            /** ADD EXPENSES REPORT IN THE PAY CYCLE LINE **/
            if(arrExpenseReports.length != 0) {
                var intExpenseReportPaycodeId = '267507';
                for(var intIndex in arrExpenseReports) {
                    if(arrExpenseReports[intIndex].status != "paidInFull") {
                        var lineNumber = recPayCycle.findSublistLineWithValue({ sublistId: 'recmachcustrecord_sr_pcl_paycycleheader', fieldId: 'custrecord_sr_pcl_expense_report', value: arrExpenseReports[intIndex].recordid });
                        if(lineNumber == -1) {
                            if(recPayCycle.getValue('custrecord_payroll_provider') != 1) { intExpenseReportPaycodeId = "Expense Reimbursement"; }
                            var objTemp = {};
                            var intEmpId = arrExpenseReports[intIndex].entityid;
                            if(objEmployees[intEmpId] == null) { objEmployees[intEmpId] = { data:[] }; }
                            var stCode = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].code;
                            var stCostCenter = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].cost_center;
                            var dtStartDate = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].payroll_start;
                            var dtEndDate = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].payroll_end;

                            objTemp = {
                                code: stCode,
                                cost_center: stCostCenter,
                                paycode_id: intExpenseReportPaycodeId,
                                total_working_hours: arrExpenseReports[intIndex].amount,
                                payroll_start: dtStartDate,
                                payroll_end: dtEndDate,
                                leave_start: "",
                                leave_end: "",
                                number_pays: '1.00',
                                alter_rate: 0,
                            };


                            if(!recPayrollProvider.getValue('custrecord_sr_is_excluded_er_download')) {
                                objTemp['expense_report'] = arrExpenseReports[intIndex].tranid;
                            }

                            if(recPayCycle.getValue('custrecord_payroll_provider') == Malaysia_Payroll_Provider) {
                                objTemp['category'] = arrExpenseReports[intIndex].expensecategory;
                            }

                            objEmployees[intEmpId].data.push(objTemp);

                            /** CREATE PAY CYCLE LINE RECORD **/
                            var recPayCycleLine = record.create({ type: "customrecord_sr_pay_cycle_lines", isDynamic: true });
                            recPayCycleLine.setValue('custrecord_sr_pcl_paycycleheader', recPayCycle.id);
                            recPayCycleLine.setValue('custrecord_sr_pcl_employee_id', intEmpId);
                            recPayCycleLine.setValue('custrecord_sr_pcl_employee_code', stCode);
                            recPayCycleLine.setValue('custrecord_sr_pcl_cost_center_code', stCostCenter);
                            recPayCycleLine.setValue('custrecord_sr_pcl_paycode_id', intExpenseReportPaycodeId);
                            recPayCycleLine.setValue('custrecord_sr_pcl_quantity', arrExpenseReports[intIndex].fxamount);
                            recPayCycleLine.setValue('custrecord_sr_pcl_payroll_start', dtStartDate);
                            recPayCycleLine.setValue('custrecord_sr_pcl_end', dtEndDate);
                            recPayCycleLine.setValue('custrecord_leave_start', '');
                            recPayCycleLine.setValue('custrecord_leave_end', '');
                            recPayCycleLine.setValue('custrecord_number_pays', '1.00');
                            recPayCycleLine.setValue('custrecord_alternative_rate', 0);
                            recPayCycleLine.setValue('custrecord_sr_pcl_expense_report', arrExpenseReports[intIndex].recordid);

                            if(recPayCycle.getValue('custrecord_payroll_provider') == Malaysia_Payroll_Provider) {
                                recPayCycleLine.setValue('custrecord_sr_pcl_expense_category', arrExpenseReports[intIndex].expensecategory);
                            }

                            recPayCycleLine.save();

                            /** LINK PAY CYCLE TO EXPENSE REPORTS **/
                            record.submitFields({
                                type: "expensereport",
                                id: arrExpenseReports[intIndex].recordid,
                                values: { custbody_sr_pay_cycle: recPayCycle.id }
                            });
                        }
                    }

                }
            }
            // }

            // var arrCommissions = libHelper.getEmployeeCommissions(arrEmployees, recPayCycle.getText('custrecord_sr_pc_start_date'), recPayCycle.getText('custrecord_sr_pc_end_date'));

            /** ADD COMMISSIONS IN THE OBJECT FOR CSV GENERATION **/
                // if(arrCommissions.length != 0) {
                //     var intCommissionId = '14378';
                //     for(var intIndex in arrCommissions) {
                //         if(arrCommissions[intIndex].status != "paidInFull") {
                //             var lineNumber = recPayCycle.findSublistLineWithValue({ sublistId: 'recmachcustrecord_sr_pcl_paycycleheader', fieldId: 'custrecord_sr_pcl_commission', value: arrCommissions[intIndex].recordid });
                //             if(lineNumber == -1) {
                //                 var objTemp = {};
                //                 var intEmpId = arrCommissions[intIndex].entityid;
                //                 if(objEmployees[intEmpId] == null) { objEmployees[intEmpId] = { data:[] }; }
                //                 var now = new Date();
                //                 var stCode = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].code;
                //                 var stCostCenter = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].cost_center;
                //                 var stPayCode = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].paycode_id;
                //                 var dtStartDate = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].payroll_start;
                //                 var dtEndDate = (typeof objEmployees[intEmpId].data[0] == 'undefined') ? "" : objEmployees[intEmpId].data[0].payroll_end;
                //                 objTemp = {
                //                     code: stCode,
                //                     cost_center: stCostCenter,
                //                     paycode_id: intCommissionId,
                //                     total_working_hours: arrCommissions[intIndex].fxamount,
                //                     payroll_start: dtStartDate,
                //                     payroll_end: dtEndDate,
                //                     leave_start: "",
                //                     leave_end: "",
                //                     number_pays: '1.00',
                //                     alter_rate: 0
                //                 };
                //
                //                 if(!recPayrollProvider.getValue('custrecord_sr_is_excluded_commission_dl')) {
                //                     objTemp['commission'] = arrCommissions[intIndex].tranid;
                //                 }
                //
                //                 objEmployees[intEmpId].data.push(objTemp);
                //
                //                 var recPayCycleLine = record.create({ type: "customrecord_sr_pay_cycle_lines", isDynamic: true });
                //                 recPayCycleLine.setValue('custrecord_sr_pcl_paycycleheader', recPayCycle.id);
                //                 recPayCycleLine.setValue('custrecord_sr_pcl_employee_id', arrCommissions[intIndex].entityid);
                //                 recPayCycleLine.setValue('custrecord_sr_pcl_employee_code', stCode);
                //                 recPayCycleLine.setValue('custrecord_sr_pcl_cost_center_code', stCostCenter);
                //                 recPayCycleLine.setValue('custrecord_sr_pcl_paycode_id', intCommissionId);
                //                 recPayCycleLine.setValue('custrecord_sr_pcl_quantity', arrCommissions[intIndex].fxamount);
                //                 recPayCycleLine.setValue('custrecord_sr_pcl_payroll_start', dtStartDate);
                //                 recPayCycleLine.setValue('custrecord_sr_pcl_end', dtEndDate);
                //                 recPayCycleLine.setValue('custrecord_leave_start', '');
                //                 recPayCycleLine.setValue('custrecord_leave_end', '');
                //                 recPayCycleLine.setValue('custrecord_number_pays', '1.00');
                //                 recPayCycleLine.setValue('custrecord_alternative_rate', 0);
                //                 recPayCycleLine.setValue('custrecord_sr_pcl_commission', arrCommissions[intIndex].recordid);
                //                 recPayCycleLine.save();
                //             }
                //         }
                //     }
                // }

            var dtStartDate = libHelper.getFormattedDate(recPayCycle.getText('custrecord_sr_pc_start_date'));
            var dtEndDate = libHelper.getFormattedDate(recPayCycle.getText('custrecord_sr_pc_end_date'));

            var arrRows = [];
            var stFileName = 'payroll-'+dtStartDate.getDate()+'-'+dtEndDate.getDate()+'-'+(dtEndDate.getMonth()+1)+'-'+dtEndDate.getFullYear()+'.csv';

            for(var i in objEmployees) {
                for(var j in objEmployees[i].data) {
                    var arrColumns = [];
                    for(var intDataIndex in objEmployees[i].data[j]) {
                        arrColumns.push(objEmployees[i].data[j][intDataIndex]);
                    }
                    arrRows.push(arrColumns.join(',')+'\r');
                }
            }

            var stHeader = "";
            if(recPayCycle.getValue('custrecord_payroll_provider') != 1) {
                stHeader = libHelper.csvHeader.join(',') + '\n';
            }

            var fileObj = file.create({
                name: stFileName,
                fileType: file.Type.CSV,
                contents: stHeader
            });

            // if(runtime.envType == 'SANDBOX') {
            //     fileObj.folder = 7191; // SANDBOX
            // } else {
            fileObj.folder = 6295; // PRODUCTION
            // }

            // log.debug('arrRows', arrRows);

            for (var i in arrRows) { fileObj.appendLine({ value: arrRows[i] }); }

            var fileId = fileObj.save();
            var now = new Date();
            var currentDate = (parseInt(now.getMonth())+1)+'/'+now.getDate()+'/'+now.getFullYear();
            recPayCycle.setValue('custrecord_sr_pc_csv_file', fileId);
            recPayCycle.setValue('custrecord_sr_last_generated_by', userObj.id);
            recPayCycle.setValue('custrecord_sr_last_generated_on', libHelper.getCurrentDateFormatBasedOnUserSetup());
            recPayCycle.save();

            context.response.writeFile({ file: fileObj });
        }

        return { onRequest: onRequest };

    });